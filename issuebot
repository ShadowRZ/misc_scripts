#!/usr/bin/env python3

import datetime
import sys
import os
import subprocess
import shutil
import fileinput

from github import GitHub
from myutils import file_lock

from webhooks.issue import parse_issue_text

REQUEST_WAITING_TIME = datetime.timedelta(days=30)
ORPHANING_WAITING_TIME = datetime.timedelta(days=14)

LILAC_LOCK = os.path.expanduser('~/.lilac/.lock')
REPO = os.path.expanduser('~/archgitrepo')

def remove_ini_section(name, filename):
  section_header = f'[{name}]'
  skipping = False

  with fileinput.input(files=(filename,), inplace=True) as f:
    for line in f:
      if line.startswith(section_header):
        skipping = True
      elif skipping and line.startswith('['):
        skipping = False

      if not skipping:
        print(line.rstrip('\n'))

def git_push():
  while True:
    try:
      subprocess.check_output(['git', 'push'], cwd=REPO)
      break
    except subprocess.CalledProcessError as e:
      if 'non-fast-forward' in e.output or 'fetch first' in e.output:
        subprocess.check_call(["git", "pull", "--rebase"])
      else:
        sys.stdout.write(e.output)
        raise

def main():
  token = os.environ['GITHUB_TOKEN']
  gh = GitHub(token)
  repo = 'archlinuxcn/repo'
  now = datetime.datetime.now(datetime.timezone.utc)

  for issue in gh.get_repo_issues(repo, labels='package-request'):
    if now - issue.updated_at > REQUEST_WAITING_TIME:
      print(f'Marking {issue} as failed')
      issue.comment('''\
请求太久无回应，关闭。

This request has been waiting for too long, closing.''')
      issue.add_labels(['request-failed'])
      issue.close()

  issues = [issue for issue in gh.get_repo_issues(repo, labels='orphaning')
            if now - issue.updated_at > ORPHANING_WAITING_TIME
            and 'seen-by-lilac' not in issue.labels]

  for issue in issues:
    print(f'Removing orphaned {issue}')
    _issuetype, packages = parse_issue_text(issue.body)
    if not packages:
      issue.comment('''\
lilac 无法解析出涉及的软件包名，请手动处理。

lilac can't parse out the relevant package names, please handle manually.''')
      issue.add_labels(['seen-by-lilac'])
      continue

    with file_lock(LILAC_LOCK):
      subprocess.check_output(['git', 'pull'], cwd=REPO)

      for name in packages:
        shutil.rmtree(os.path.join(REPO, name))
        subprocess.check_call(['git', 'add', name], cwd=REPO)
        remove_ini_section(name, os.path.join(REPO, 'nvchecker.ini'))

      subprocess.check_call(['git', 'add', 'nvchecker.ini'], cwd=REPO)

      msg = f'{", ".join(packages)}: orphaned for a long time, removing. closes #{issue.number}'
      subprocess.check_output(['git', 'commit', '-m', msg], cwd=REPO)
      git_push()

    issue.comment('''\
已自动删除。

Automatically removed.''')

if __name__ == '__main__':
  main()
